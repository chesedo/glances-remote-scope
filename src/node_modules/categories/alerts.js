var scopes = require('unity-js-scopes');

var AlertsCategory = function() {
    this.template = {
        "schema-version": 1,
        "template": {
            "category-layout": "vertical-journal",
            "collapsed-rows": 1,
            "card-size": "large",
            "card-background": "color:///#2c363f"
        },
        "components": {
            "title": "title",
            "subtitle": "subtitle",
            "emblem": "emblem",
            "summary": "summary",
            "background": "color"
        }
    }
}

AlertsCategory.prototype.createCategory = function(search_reply) {
    var category_renderer = new scopes.lib.CategoryRenderer(JSON.stringify(this.template));
    var alerts = data.getValue("alert");
    var category = search_reply.register_category("alerts", "Alerts (Showing last " + alerts.length + ")", "", category_renderer);

    alerts.forEach(function(alert) {
        search_reply.push(this.createCard(alert, category))
    }.bind(this));
}

AlertsCategory.prototype.createCard = function (alert, category) {
    var categorised_result = new scopes.lib.CategorisedResult(category);
    var period = dateToString(alert[0]) + " - " + dateToString(alert[1]);
    var table = [
                ["Max", alert[4]],
                ["Min", alert[6]],
                ["Mean", alert[5]]
            ];

    categorised_result.set("resultCategory", "Alerts");
    categorised_result.set_uri(alert[3] + alert[0]);
    categorised_result.set_title(alert[3]);
    categorised_result.set("subtitle", period);
    categorised_result.set("emblem", data.getAlertEmblem(alert));
    categorised_result.set("summary", "Total: " + timeDiffToString(alert[0], alert[1]));
    categorised_result.set("table", table);

    // Set color if still running
    if (alert[1] === -1) {
        categorised_result.set("color", "color:///#ddd6d9");
    }


    return categorised_result;
}

AlertsCategory.prototype.createPreview = function(preview_reply) {
    var layout1col = new scopes.lib.ColumnLayout(1);
    var layout2col = new scopes.lib.ColumnLayout(2);
    layout1col.add_column(["header", "text", "table"]);

    layout2col.add_column(["header", "text"]);
    layout2col.add_column(["table"]);

    preview_reply.register_layout([layout1col, layout2col]);

    var header = new scopes.lib.PreviewWidget("header", "header");
    header.add_attribute_mapping("title", "title");
    header.add_attribute_mapping("subtitle", "subtitle");
    header.add_attribute_mapping("emblem", "emblem");

    var text = new scopes.lib.PreviewWidget("text", "text");
    text.add_attribute_mapping("text", "summary");

    var table = new scopes.lib.PreviewWidget("table", "table");
    table.add_attribute_value("title", "Values");
    table.add_attribute_mapping("values", "table");

    preview_reply.push([header, text, table]);
    preview_reply.finished();
}


// Convert a unix date to string
function dateToString(date)
{
    // -1 means still running
    if (date === -1) {
        return "Present"
    } else {
        date = new Date(date * 1000)
    }

    var now = new Date();
    var diffDays = (now - date) / 1000 / 60 / 60 / 24;

    if (diffDays < 1 && now.getDate() - date.getDate() === 0) {
        // If on same date as today, just show time
        return date.toTimeString().substring(0,8)
    } else if (diffDays < 2 && now.getDate() - date.getDate() === 1) {
        // If yesterday, show yesterday and time
        return "Yesterday" + date.toTimeString().substring(0,8)
    }
}

// Get the difference between two unix times
function timeDiffToString(start, end)
{
    // -1 means still running so set it to now, else use end
    end = (end === -1) ? new Date() : new Date(end *1000);
    start = new Date(start * 1000);

    var diff = new Date(end - start);

    return diff.toISOString().substring(11,19)
}

exports.AlertsCategory = AlertsCategory;
