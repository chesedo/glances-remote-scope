var scopes = require('unity-js-scopes');

var ResourcesCategory = function() {
    this.template = {
        "schema-version": 1,
        "template": {
            "category-layout": "grid",
            "card-size": "medium",
            "collapsed-rows": 0,
            "card-background": "color:///#2c363f"
        },
        "components": {
            "title": "title",
            "emblem": "emblem",
            "mascot": "mascot",
            "attributes": "attributes"
        }
    }
}

ResourcesCategory.prototype.createCategory = function (search_reply, canned_query)
{
    var category_renderer = new scopes.lib.CategoryRenderer(JSON.stringify(this.template));
    var category = search_reply.register_category("resources", data.getValue("system")["linux_distro"] + " (Up: " + data.getValue("uptime") + ")", "", category_renderer);

    search_reply.push(this.createCpuCard(category, canned_query));
    search_reply.push(this.createMemoryCard(category, canned_query));
    search_reply.push(this.createSwapCard(category));
    search_reply.push(this.createDiskIOCard(category));
    search_reply.push(this.createNetworkIOCard(category, canned_query));

    // Add docker if it exists
    if (data.hasDocker()) {
        search_reply.push(this.createDockerCard(category, canned_query));
    }
}

ResourcesCategory.prototype.createCpuCard = function (category, canned_query) {
    var categorised_result = new scopes.lib.CategorisedResult(category);
    var item = "cpu_user";
    var attributes = [
                {"value": data.getPercentValue(item)}
            ]
    var table = [
                ["User", data.getPercentValue("cpu_user")],
                ["System", data.getPercentValue("cpu_system")],
                ["Idle", data.getPercentValue("cpu_idle")],
                ["Nice", data.getPercentValue("cpu_nice")],
                ["Irq", data.getPercentValue("cpu_irq")],
                ["IO Wait", data.getPercentValue("cpu_iowait")],
                ["Steal", data.getPercentValue("cpu_steal")]
            ]

    canned_query.set_department_id("processList");
    var action = [
                {"id": "view", "label": "All Processes", "uri": canned_query.to_uri()}
            ];

    categorised_result.set("resultCategory", "Resources");
    categorised_result.set_uri("CPU");
    categorised_result.set_title("CPU");
    categorised_result.set("subtitle", "Total: " + attributes[0].value);
    categorised_result.set("attributes", attributes);
    categorised_result.set("emblem", data.getEmblem(item));
    categorised_result.set("mascot", "file:///" + scopes.self.scope_directory + "/mascots/cpu.svg");
    categorised_result.set("table", table);
    categorised_result.set("action", action);

    return categorised_result;
}

ResourcesCategory.prototype.createMemoryCard = function (category, canned_query) {
    var categorised_result = new scopes.lib.CategorisedResult(category);
    var item = "mem_percent";
    var attributes = [
                {"value": data.getPercentValue(item)}
            ]
    var table = [
                ["Total", data.getDataValue("mem_total")],
                ["Used", data.getDataValue("mem_used")],
                ["Free", data.getDataValue("mem_free")],
                ["Active", data.getDataValue("mem_active")],
                ["Inactive", data.getDataValue("mem_inactive")],
                ["Buffers", data.getDataValue("mem_buffers")],
                ["Cached", data.getDataValue("mem_cached")]
            ]

    canned_query.set_department_id("processList");
    var action = [
                {"id": "view", "label": "All Processes", "uri": canned_query.to_uri()}
            ];

    categorised_result.set("resultCategory", "Resources");
    categorised_result.set_uri("Memory");
    categorised_result.set_title("Memory");
    categorised_result.set("subtitle", "Used: " + attributes[0].value);
    categorised_result.set("attributes", attributes);
    categorised_result.set("emblem", data.getEmblem(item));
    categorised_result.set("mascot", "file:///" + scopes.self.scope_directory + "/mascots/memory.svg");
    categorised_result.set("table", table);
    categorised_result.set("action", action);

    return categorised_result;
}

ResourcesCategory.prototype.createSwapCard = function (category) {
    var categorised_result = new scopes.lib.CategorisedResult(category);
    var item = "memswap_percent";
    var attributes = [
                {"value": data.getPercentValue(item)}
            ]
    var table = [
                ["Total", data.getDataValue("memswap_total")],
                ["Used", data.getDataValue("memswap_used")],
                ["Free", data.getDataValue("memswap_free")],
                ["Sin", data.getDataValue("memswap_sin")],
                ["Sout", data.getDataValue("memswap_sout")]
            ]

    categorised_result.set("resultCategory", "Resources");
    categorised_result.set_uri("Swap");
    categorised_result.set_title("Swap");
    categorised_result.set("subtitle", "Used: " + attributes[0].value);
    categorised_result.set("attributes", attributes);
    categorised_result.set("emblem", data.getEmblem(item));
    categorised_result.set("mascot", "file:///" + scopes.self.scope_directory + "/mascots/swap.svg");
    categorised_result.set("table", table);

    return categorised_result;
}

ResourcesCategory.prototype.createDiskIOCard = function (category) {
    var categorised_result = new scopes.lib.CategorisedResult(category);
    var total = data.getTotalDiskIO();
    var attributes = [
                {"value": data.convertByteRate(total["write_bytes"] + total["read_bytes"])}
            ]

    var totalTable = [
        ["Total", attributes[0].value],
        ["Read", data.convertByteRate(total["read_bytes"])],
        ["Write", data.convertByteRate(total["write_bytes"])]
    ]
    var disksTable = [];

    // Build disks' values
    data.getValue("diskio").forEach(function(disk) {
        var diskObj = {"name": disk["disk_name"]};
        diskObj["values"] = [
            ["Read", data.convertByteRate(disk["read_bytes"] / disk["time_since_update"])],
            ["Write", data.convertByteRate(disk["write_bytes"] / disk["time_since_update"])],
            ["Total", data.convertByteRate((disk["read_bytes"] + disk["write_bytes"]) / disk["time_since_update"])],
        ]

        disksTable.push(diskObj);
    })

    categorised_result.set("resultCategory", "Resources");
    categorised_result.set_uri("Disk IO");
    categorised_result.set_title("Disk IO");
    categorised_result.set("attributes", attributes);
    categorised_result.set("mascot", "file:///" + scopes.self.scope_directory + "/mascots/disk.svg");
    categorised_result.set("totalTable", totalTable);
    categorised_result.set("disksTable", disksTable);

    return categorised_result;
}

ResourcesCategory.prototype.createNetworkIOCard = function (category, canned_query) {
    var categorised_result = new scopes.lib.CategorisedResult(category);
    var total = data.getTotalNetworkIO();
    var attributes = [
                {"value": data.convertByteRate(total["cx"])},
            ]

    canned_query.set_department_id("network");

    categorised_result.set_uri(canned_query.to_uri());
    categorised_result.set_title("Network IO");
    categorised_result.set("attributes", attributes);
    categorised_result.set("mascot", "file:///" + scopes.self.scope_directory + "/mascots/network.svg");

    return categorised_result;
}

ResourcesCategory.prototype.createDockerCard = function (category, canned_query) {
    var categorised_result = new scopes.lib.CategorisedResult(category);
    var attributes = [
        {"value": data.getValue("docker_containers").length + " running"},
    ]

    canned_query.set_department_id("docker");

    categorised_result.set_uri(canned_query.to_uri());
    categorised_result.set_title("Docker");
    categorised_result.set("attributes", attributes);
    categorised_result.set("mascot", "file:///" + scopes.self.scope_directory + "/mascots/docker.svg");

    return categorised_result;
}

ResourcesCategory.prototype.createPreview = function(preview_reply, result) {
    switch (result.get("uri")) {
        case "CPU":
        case "Memory":
        case "Swap":
            this.createGeneralPreview(preview_reply);
            break;
        case "Disk IO":
            this.createDiskIOPreview(preview_reply, result);
            break;
    }
}

ResourcesCategory.prototype.createGeneralPreview = function(preview_reply) {
    var layout1col = new scopes.lib.ColumnLayout(1);
    layout1col.add_column(["header", "table", "action"]);

    preview_reply.register_layout([layout1col]);

    var header = new scopes.lib.PreviewWidget("header", "header");
    header.add_attribute_mapping("title", "title");
    header.add_attribute_mapping("subtitle", "subtitle");
    header.add_attribute_mapping("emblem", "emblem");

    var table = new scopes.lib.PreviewWidget("table", "table");
    table.add_attribute_mapping("values", "table");

    var action = new scopes.lib.PreviewWidget("action", "actions");
    action.add_attribute_mapping("actions", "action");

    preview_reply.push([header, table, action]);
    preview_reply.finished();
}

ResourcesCategory.prototype.createDiskIOPreview = function(preview_reply, result) {
    var layout1col = new scopes.lib.ColumnLayout(1);
    layout1col.add_column(["header", "table", "exp"]);

    var layout2col = new scopes.lib.ColumnLayout(2);
    layout2col.add_column(["header", "table"]);
    layout2col.add_column(["exp"]);

    preview_reply.register_layout([layout1col, layout2col]);

    var header = new scopes.lib.PreviewWidget("header", "header");
    header.add_attribute_mapping("title", "title");

    // Create total table
    var table = new scopes.lib.PreviewWidget("table", "table");
    table.add_attribute_mapping("values", "totalTable");

    // Create expandable
    var exp = new scopes.lib.PreviewWidget("exp", "expandable");

    // Add each disk as table to expandable
    var disksTable = result.get("disksTable");
    disksTable.forEach(function(disk) {
        var diskTable = new scopes.lib.PreviewWidget(disk["name"], "table");
        diskTable.add_attribute_value("title", disk["name"]);
        diskTable.add_attribute_value("values", disk["values"]);

        exp.add_widget(diskTable);
    })
    exp.add_attribute_value("collapsed-widgets", 0);

    preview_reply.push([header, table, exp]);
    preview_reply.finished();
}

exports.ResourcesCategory = ResourcesCategory;
